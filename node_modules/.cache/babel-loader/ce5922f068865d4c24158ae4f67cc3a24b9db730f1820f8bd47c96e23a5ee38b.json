{"ast":null,"code":"var _jsxFileName = \"/Users/tsitsi_iobashvili/Desktop/Task/data-visualizer/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport Papa from \"papaparse\";\nimport { Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from \"@mui/material\";\nimport * as PropTypes from \"prop-types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DataGrid(props) {\n  return null;\n}\n_c = DataGrid;\nDataGrid.propTypes = {\n  columns: PropTypes.any,\n  checkboxSelection: PropTypes.bool,\n  rowsPerPageOptions: PropTypes.arrayOf(PropTypes.number),\n  pageSize: PropTypes.number,\n  rows: PropTypes.number\n};\nfunction App() {\n  _s();\n  // State to store parsed data\n  const [parsedData, setParsedData] = useState([]);\n\n  //State to store table Column name\n  const [tableRows, setTableRows] = useState([]);\n\n  //State to store the values\n  const [values, setValues] = useState([]);\n  const changeHandler = event => {\n    // Passing file data (event.target.files[0]) to parse using Papa.parse\n    Papa.parse(event.target.files[0], {\n      header: true,\n      skipEmptyLines: true,\n      complete: function (results) {\n        const rowsArray = [];\n        const valuesArray = [];\n\n        // Iterating data to get column name and their values\n        results.data.map(d => {\n          rowsArray.push(Object.keys(d));\n          valuesArray.push(Object.values(d));\n        });\n\n        // Parsed Data Response in array format\n        setParsedData(results.data);\n\n        // Filtered Column Names\n        setTableRows(rowsArray[0]);\n\n        // Filtered Values\n        setValues(valuesArray);\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      name: \"file\",\n      onChange: changeHandler,\n      accept: \".csv\",\n      style: {\n        display: \"block\",\n        margin: \"10px auto\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n      component: Paper,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        sx: {\n          minWidth: 650\n        },\n        \"aria-label\": \"simple table\",\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: tableRows.map((rows, index) => {\n              return /*#__PURE__*/_jsxDEV(TableCell, {\n                children: rows\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 40\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: values.map((value, index) => {\n            return /*#__PURE__*/_jsxDEV(TableRow, {\n              children: value.map((val, i) => {\n                return /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: val\n                }, i, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 85,\n                  columnNumber: 48\n                }, this);\n              })\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"0OmtFBKQjJA2CM4YMPVc3GVsSh8=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"DataGrid\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["useState","Papa","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","PropTypes","DataGrid","props","propTypes","columns","any","checkboxSelection","bool","rowsPerPageOptions","arrayOf","number","pageSize","rows","App","parsedData","setParsedData","tableRows","setTableRows","values","setValues","changeHandler","event","parse","target","files","header","skipEmptyLines","complete","results","rowsArray","valuesArray","data","map","d","push","Object","keys","display","margin","minWidth","index","value","val","i"],"sources":["/Users/tsitsi_iobashvili/Desktop/Task/data-visualizer/src/App.js"],"sourcesContent":["import { useState } from \"react\";\nimport Papa from \"papaparse\";\nimport {Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow} from \"@mui/material\";\nimport * as PropTypes from \"prop-types\";\n\nfunction DataGrid(props) {\n    return null;\n}\n\nDataGrid.propTypes = {\n    columns: PropTypes.any,\n    checkboxSelection: PropTypes.bool,\n    rowsPerPageOptions: PropTypes.arrayOf(PropTypes.number),\n    pageSize: PropTypes.number,\n    rows: PropTypes.number\n};\n\nfunction App() {\n    // State to store parsed data\n    const [parsedData, setParsedData] = useState([]);\n\n    //State to store table Column name\n    const [tableRows, setTableRows] = useState([]);\n\n    //State to store the values\n    const [values, setValues] = useState([]);\n\n    const changeHandler = (event) => {\n        // Passing file data (event.target.files[0]) to parse using Papa.parse\n        Papa.parse(event.target.files[0], {\n            header: true,\n            skipEmptyLines: true,\n            complete: function (results) {\n                const rowsArray = [];\n                const valuesArray = [];\n\n                // Iterating data to get column name and their values\n                results.data.map((d) => {\n                    rowsArray.push(Object.keys(d));\n                    valuesArray.push(Object.values(d));\n                });\n\n                // Parsed Data Response in array format\n                setParsedData(results.data);\n\n                // Filtered Column Names\n                setTableRows(rowsArray[0]);\n\n                // Filtered Values\n                setValues(valuesArray);\n            },\n        });\n    };\n\n    return (\n        <div>\n            {/* File Uploader */}\n            <input\n                type=\"file\"\n                name=\"file\"\n                onChange={changeHandler}\n                accept=\".csv\"\n                style={{ display: \"block\", margin: \"10px auto\" }}\n            />\n            <br />\n            <br />\n            {/* Table */}\n\n            <TableContainer component={Paper}>\n                <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n                    <TableHead>\n                        <TableRow>\n                            {tableRows.map((rows, index) => {\n                                return <TableCell key={index}>{rows}</TableCell>;\n                            })}\n                        </TableRow>\n                    </TableHead>\n\n                    <TableBody>\n\n                        {values.map((value, index) => {\n                            return (\n                                <TableRow key={index}>\n                                    {value.map((val, i) => {\n                                        return <TableCell key={i}>{val}</TableCell>;\n                                    })}\n                                </TableRow>\n                            );\n                        })}\n                    </TableBody>\n\n\n                </Table>\n            </TableContainer>\n            \n\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}