{"ast":null,"code":"var _jsxFileName = \"/Users/tsitsi_iobashvili/Desktop/Task/data-visualizer/src/DataTableContainer.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport Papa from \"papaparse\";\nimport DataTable from \"./DataTable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataTableContainer = () => {\n  _s();\n  // State to store parsed data\n  const [parsedData, setParsedData] = useState([]);\n\n  //State to store table Column name\n  const [tableRows, setTableRows] = useState([]);\n\n  //State to store the values\n  const [values, setValues] = useState([]);\n  const changeHandler = event => {\n    // Passing file data (event.target.files[0]) to parse using Papa.parse\n    Papa.parse(event.target.files[0], {\n      header: true,\n      skipEmptyLines: true,\n      complete: function (results) {\n        const rowsArray = [];\n        const valuesArray = [];\n\n        // Iterating data to get column name and their values\n        results.data.map(d => {\n          rowsArray.push(Object.keys(d));\n          valuesArray.push(Object.values(d));\n        });\n\n        // Parsed Data Response in array format\n        setParsedData(results.data);\n\n        // Filtered Column Names\n        setTableRows(rowsArray[0]);\n\n        // Filtered Values\n        setValues(valuesArray);\n      }\n    });\n  };\n  console.log(tableRows);\n  return /*#__PURE__*/_jsxDEV(DataTable, {\n    changeHandler: changeHandler,\n    tableRows: tableRows,\n    values: values\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n_s(DataTableContainer, \"0OmtFBKQjJA2CM4YMPVc3GVsSh8=\");\n_c = DataTableContainer;\nexport default DataTableContainer;\nvar _c;\n$RefreshReg$(_c, \"DataTableContainer\");","map":{"version":3,"names":["useState","Papa","DataTable","DataTableContainer","parsedData","setParsedData","tableRows","setTableRows","values","setValues","changeHandler","event","parse","target","files","header","skipEmptyLines","complete","results","rowsArray","valuesArray","data","map","d","push","Object","keys","console","log"],"sources":["/Users/tsitsi_iobashvili/Desktop/Task/data-visualizer/src/DataTableContainer.js"],"sourcesContent":["import {useState} from \"react\";\nimport Papa from \"papaparse\";\nimport DataTable from \"./DataTable\";\n\nconst DataTableContainer = () => {\n\n    // State to store parsed data\n    const [parsedData, setParsedData] = useState([]);\n\n    //State to store table Column name\n    const [tableRows, setTableRows] = useState([]);\n\n    //State to store the values\n    const [values, setValues] = useState([]);\n\n    const changeHandler = (event) => {\n        // Passing file data (event.target.files[0]) to parse using Papa.parse\n        Papa.parse(event.target.files[0], {\n            header: true,\n            skipEmptyLines: true,\n            complete: function (results) {\n                const rowsArray = [];\n                const valuesArray = [];\n\n                // Iterating data to get column name and their values\n                results.data.map((d) => {\n                    rowsArray.push(Object.keys(d));\n                    valuesArray.push(Object.values(d));\n                });\n\n                // Parsed Data Response in array format\n                setParsedData(results.data);\n\n                // Filtered Column Names\n                setTableRows(rowsArray[0]);\n\n                // Filtered Values\n                setValues(valuesArray);\n            },\n        });\n    };\n\n    console.log(tableRows)\n\n    return (\n\n        <DataTable\n            changeHandler={changeHandler}\n            tableRows={tableRows}\n            values={values}\n        />\n    )\n}\n\nexport default DataTableContainer"],"mappings":";;AAAA,SAAQA,QAAQ,QAAO,OAAO;AAC9B,OAAOC,IAAI,MAAM,WAAW;AAC5B,OAAOC,SAAS,MAAM,aAAa;AAAC;AAEpC,MAAMC,kBAAkB,GAAG,MAAM;EAAA;EAE7B;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;;EAEhD;EACA,MAAM,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;;EAE9C;EACA,MAAM,CAACQ,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAExC,MAAMU,aAAa,GAAIC,KAAK,IAAK;IAC7B;IACAV,IAAI,CAACW,KAAK,CAACD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,EAAE;MAC9BC,MAAM,EAAE,IAAI;MACZC,cAAc,EAAE,IAAI;MACpBC,QAAQ,EAAE,UAAUC,OAAO,EAAE;QACzB,MAAMC,SAAS,GAAG,EAAE;QACpB,MAAMC,WAAW,GAAG,EAAE;;QAEtB;QACAF,OAAO,CAACG,IAAI,CAACC,GAAG,CAAEC,CAAC,IAAK;UACpBJ,SAAS,CAACK,IAAI,CAACC,MAAM,CAACC,IAAI,CAACH,CAAC,CAAC,CAAC;UAC9BH,WAAW,CAACI,IAAI,CAACC,MAAM,CAACjB,MAAM,CAACe,CAAC,CAAC,CAAC;QACtC,CAAC,CAAC;;QAEF;QACAlB,aAAa,CAACa,OAAO,CAACG,IAAI,CAAC;;QAE3B;QACAd,YAAY,CAACY,SAAS,CAAC,CAAC,CAAC,CAAC;;QAE1B;QACAV,SAAS,CAACW,WAAW,CAAC;MAC1B;IACJ,CAAC,CAAC;EACN,CAAC;EAEDO,OAAO,CAACC,GAAG,CAACtB,SAAS,CAAC;EAEtB,oBAEI,QAAC,SAAS;IACN,aAAa,EAAEI,aAAc;IAC7B,SAAS,EAAEJ,SAAU;IACrB,MAAM,EAAEE;EAAO;IAAA;IAAA;IAAA;EAAA,QACjB;AAEV,CAAC;AAAA,GAhDKL,kBAAkB;AAAA,KAAlBA,kBAAkB;AAkDxB,eAAeA,kBAAkB;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}